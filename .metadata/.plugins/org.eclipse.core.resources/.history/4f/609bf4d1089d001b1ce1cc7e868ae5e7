package com.mindtree.supermarketmanagementapplication.service.serviceimpl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mindtree.supermarketmanagementapplication.entity.Amount;
import com.mindtree.supermarketmanagementapplication.entity.Customer;
import com.mindtree.supermarketmanagementapplication.entity.Item;
import com.mindtree.supermarketmanagementapplication.exception.serviceexception.CustomerIdDoesNotExistException;
import com.mindtree.supermarketmanagementapplication.exception.serviceexception.FemaleDoesNotExistException;
import com.mindtree.supermarketmanagementapplication.repository.AmountRepository;
import com.mindtree.supermarketmanagementapplication.repository.CustomerRepository;
import com.mindtree.supermarketmanagementapplication.repository.ItemRepository;
import com.mindtree.supermarketmanagementapplication.service.CustomerService;
import com.mindtree.supermarketmanagementapplication.service.ItemService;

@Service
public class ServiceHandler implements CustomerService, ItemService {

	@Autowired
	CustomerRepository customerrepo;

	@Autowired
	ItemRepository itemrepo;

	@Autowired
	AmountRepository amountrepo;

	Map<Integer, Double> amountMappedToCustomer = new HashMap<Integer, Double>();

	@Override
	public void addCustomer(Customer customer) {
		customerrepo.save(customer);
	}

	@Override
	public void addItem(Item item) {
		itemrepo.save(item);
	}

	@Override
	public Customer itemsPurchasedByCustomer(List<Item> items, int customerId) throws CustomerIdDoesNotExistException {

		Customer customer = customerrepo.findById(customerId)
				.orElseThrow(() -> new CustomerIdDoesNotExistException("Customer Id does not exist"));

		double amt = 0;

		amt = items.stream().map(x -> x.getPrice()).reduce((double) 0, (x, y) -> x + y);

		for (int i = 0; i < items.size(); i++) {
			amt += items.get(i).getPrice();
		}

		amountMappedToCustomer.put(customerId, amt);
		customer.getItems().addAll(items);
		customerrepo.save(customer);

		double totalAmount = amountMappedToCustomer.get(customerId);

		Amount amount = new Amount(customerId, totalAmount);
		amountrepo.save(amount);
		// System.out.println(amountMappedToCustomer);
		return customer;
	}

	@Override
	public List<Customer> getAllFemales() throws FemaleDoesNotExistException {
		Set<Customer> allCustomer = customerrepo.findAll().stream().collect(Collectors.toSet());
		List<Customer> femaleCustomers = new ArrayList<Customer>();

		Customer female = allCustomer.stream().filter(x -> x.getGender().equalsIgnoreCase("female")).findAny()
				.orElseThrow(() -> new FemaleDoesNotExistException("Female Does Not Exist."));

		femaleCustomers.add(female);

		femaleCustomers.forEach(x -> {

		});

		return femaleCustomers;
	}
}
