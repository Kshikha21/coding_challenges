package com.mindtree.activity.controller;

import java.util.List;

import org.apache.catalina.connector.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.mindtree.activity.entity.Patient;
import com.mindtree.activity.entity.QuarantineCenter;
import com.mindtree.activity.service.serviceImpl.QuarantineServiceImpl;

@Controller
public class HomeController {
	@Autowired
	private QuarantineServiceImpl service;
	
	@RequestMapping("/")
	public String welcome() {
		return "welcome";
	}
	
	@RequestMapping(value="/storeactivity",method=RequestMethod.GET)
	public ResponseEntity<?> activityAdd(@Validated @RequestParam String name) {
		QuarantineCenter newactivity=new QuarantineCenter();
		newactivity.setPlaceName(name);
		try {
			service.save(newactivity);
			return ResponseEntity.status(HttpStatus.OK).body("details saved");
		}catch(DataAccessException e) {
			e.printStackTrace();
		 return 	ResponseEntity.status(HttpStatus.NOT_FOUND).body("place name is already present");
		}
		
				
	}
	
	@RequestMapping(value="/addparticipant",method=RequestMethod.GET)
	public String participantAdd(@RequestParam (value="name") String name, @RequestParam int age , @RequestParam String placeName)
	
	{
		QuarantineCenter act=null;
		act=service.display(placeName);
		Patient parti =new Patient(name,age,act);
		service.save(parti);
		return "welcome";
}
	@GetMapping("/details")
	public ModelAndView display( ModelAndView model) {
		List<Patient> parti=service.displayParticipant();
		model.addObject("parti",parti);
		System.out.println(parti);
		model.setViewName("allRecord");
		return model;
		
	}
	
	
	
	
	
	
	
	
	
	@RequestMapping("/update")
	public String update(Model m) {
		List<QuarantineCenter> list = service.getAllQuarantineCenter();
		m.addAttribute("list", list);
		return "update";
		
	}
	@RequestMapping("/updateCenter")
	public String updateCenter(@RequestParam("id") String id,@RequestParam("place") String age,@RequestParam("strength") String strength) {
		int qId=Integer.valueOf(id);
		QuarantineCenter qc = new QuarantineCenter(qId, age, strength);
		service.updateCenter(qc);
		return "update";
		
	}
	@RequestMapping("/delete")
	public String delete(Model m) {
		List<QuarantineCenter> list = service.getAllQuarantineCenter();
	
		m.addAttribute("list", list);
		return "delete";
		
	}
	
	@RequestMapping(value = "/deleteQuarantine", method = RequestMethod.GET)
	public String deleteParticipant(@RequestParam("id") String id) {
		int pId = Integer.valueOf(id);
		System.out.println("id"+id);
		service.deleteCenter(pId);
		return "delete";
		
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
}